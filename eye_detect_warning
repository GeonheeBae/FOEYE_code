from scipy.spatial import distance as dist
from imutils.video import FileVideoStream
from imutils.video import VideoStream
from imutils import face_utils
import numpy as np
import argparse
import imutils
import time
import dlib
import cv2
import math



def eye_aspect_ratio(eye):
    A = dist.euclidean(eye [1], eye[5])
    B = dist.euclidean(eye [2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A+B) / (2.0 * C)
    return ear


EYE_AR_THRESH = 0.18
EYE_AR_CONSEC_FRAMES = 2
COUNTER = 0
TOTAL = 0


print("[INFO] loading facial landmark predictor...")
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")


(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

print("[INFO] starting video stream thread...")
vs = VideoStream(src=1).start()
time.sleep(1.0)

start = time.time()

while True:
    frame = vs.read()
    frame = imutils.resize(frame, width=450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    rects = detector(gray, 0)
    for rect in rects:
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)
        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)
        ear = (leftEAR + rightEAR) / 2.0
        leftEyeHull = cv2.convexHull(leftEye)
        rightEyeHull = cv2.convexHull(rightEye)
        cv2.drawContours (frame, [leftEyeHull], -1, (0, 255, 0), 1) 
        cv2.drawContours (frame, [rightEyeHull], -1, (0, 255, 0), 1)

        eyedistance = dist.euclidean(leftEye[0], leftEye[3]) 
        # 모니터와의 거리감지
        distance = 660/eyedistance        
        print(distance)


        now = time.time()
        TIME = now - start
         # 눈 깜빡임 카운트
        if ear < EYE_AR_THRESH:
            COUNTER += 1     
        else:
            if COUNTER >= EYE_AR_CONSEC_FRAMES:
                TOTAL += 1
            COUNTER = 0

        cv2.putText(frame, "Blinks: {}".format(TOTAL), (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
        cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
        cv2.putText(frame, "distance: {:.2f}".format(distance), (10, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

        # 경보 횟수와 모니터 거리는 강남 성모원 안과 자료 참고
        if TIME > 0:
            cv2.putText(frame, "Time: {:.2f}".format(TIME), (300, 50),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
            #if TIME > 60 and TOTAL < 20:
                #cv2.putText(frame, "Warning!!", (180, 150),
                #            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                #cv2.putText(frame, "Please blink more", (130, 170),
                #            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            if distance < 40:           
                cv2.putText(frame, "Too close", (180, 300),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                        

    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF

    if key == ord("q"):
        break

cv2.destroyAllWindows()
vs.stop()
